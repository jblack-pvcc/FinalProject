import pygame
import random

pygame.init()

pygame.display.set_caption("Snake Game")

WIDTH, HEIGHT = 608, 608
BLOCK_SIZE = 38

WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)

score_font = pygame.font.SysFont("timesnewroman", 20)

screen = pygame.display.set_mode((WIDTH, HEIGHT))
clock = pygame.time.Clock()

snake_pos = [[WIDTH//2, HEIGHT//2]]

def game_over_screen():
    game_over_font = pygame.font.SysFont("timesnewroman", 25)
    game_over_text = game_over_font.render(f"Game Over! Score: {score}.", True, WHITE)
    game_over_text_options = game_over_font.render(f"Press r to restart and q to quit.", True, WHITE)
    screen.blit(game_over_text, (WIDTH // 2 - game_over_text.get_width() // 2, (HEIGHT // 2 - game_over_text.get_height() // 2)-20))
    screen.blit(game_over_text_options, (WIDTH // 2 - game_over_text_options.get_width() // 2, \
                                      (HEIGHT // 2 - game_over_text_options.get_height() // 2)+20))
    pygame.display.update()
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_r:
                    run()
                    return
                elif event.key == pygame.K_q:
                    pygame.quit()
                    return

def generate_food():
    while True:
        x = random.randint(0, (WIDTH - BLOCK_SIZE) // BLOCK_SIZE ) * BLOCK_SIZE
        y = random.randint(0, (HEIGHT - BLOCK_SIZE) // BLOCK_SIZE ) * BLOCK_SIZE
        food_pos = [x, y]
        if food_pos not in snake_pos:
            return food_pos

def draw_objects():
    screen.fill((0, 0, 0))
    for pos in snake_pos:
        pygame.draw.rect(screen, GREEN, pygame.Rect(pos[0], pos[1], BLOCK_SIZE, BLOCK_SIZE))
    pygame.draw.rect(screen, RED, pygame.Rect(food_pos[0], food_pos[1], BLOCK_SIZE, BLOCK_SIZE))
    score_text = score_font.render(f"Score: {score}", True, WHITE)
    screen.blit(score_text, (10, 10))

def update_snake():
    global food_pos, score
    new_head = [snake_pos[0][0] + snake_speed[0], snake_pos[0][1] + snake_speed[1]]

    if new_head == food_pos:
        food_pos = generate_food()
        score += 1
    else:
        snake_pos.pop()
    
    snake_pos.insert(0, new_head)

def game_over():
    return snake_pos[0] in snake_pos[1:] or \
        snake_pos[0][0] > WIDTH - BLOCK_SIZE or \
        snake_pos[0][0] < 0 or \
        snake_pos[0][1] > HEIGHT - BLOCK_SIZE or \
        snake_pos[0][1] < 0

def run():
    global snake_speed, snake_pos, food_pos, score
    snake_pos = [[WIDTH//2, HEIGHT//2]]
    score = 0
    snake_speed = [0, 0]
    food_pos = generate_food()
    running = True
    direction = None
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.KEYDOWN: 
                if (event.key == pygame.K_UP) and (snake_speed[1] != BLOCK_SIZE):
                    direction = 'UP'
                if (event.key == pygame.K_DOWN) and (snake_speed[1] != -BLOCK_SIZE):
                    direction = 'DOWN'
                if (event.key == pygame.K_LEFT) and (snake_speed[0] != BLOCK_SIZE):
                    direction = 'LEFT'
                if (event.key == pygame.K_RIGHT) and (snake_speed[0] != -BLOCK_SIZE):
                    direction = 'RIGHT'
        if direction == "UP":
            snake_speed = [0, -BLOCK_SIZE] 
        if direction == "DOWN":  
            snake_speed = [0, BLOCK_SIZE] 
        if direction == "LEFT":
            snake_speed = [-BLOCK_SIZE, 0] 
        if direction == "RIGHT":  
            snake_speed = [BLOCK_SIZE,0]
        if game_over():
            game_over_screen()
            return
        update_snake()
        draw_objects()
        pygame.display.update()
        clock.tick(10)

run()
